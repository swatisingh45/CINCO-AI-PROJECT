/*
 * generated by Xtext 2.14.0
 */
package info.scce.cinco.product.aiProject.gratext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import info.scce.cinco.product.aiProject.gratext.ide.contentassist.antlr.internal.InternalAIProjectGratextParser;
import info.scce.cinco.product.aiProject.gratext.services.AIProjectGratextGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AIProjectGratextParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AIProjectGratextGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AIProjectGratextGrammarAccess grammarAccess) {
			builder.put(grammarAccess.get_EBooleanAccess().getAlternatives(), "rule___EBoolean__Alternatives");
			builder.put(grammarAccess.getAIProjectAccess().getGroup(), "rule__AIProject__Group__0");
			builder.put(grammarAccess.getAIProjectAccess().getGroup_3(), "rule__AIProject__Group_3__0");
			builder.put(grammarAccess.get_DecorationAccess().getGroup(), "rule___Decoration__Group__0");
			builder.put(grammarAccess.get_PointAccess().getGroup(), "rule___Point__Group__0");
			builder.put(grammarAccess.get_EIntAccess().getGroup(), "rule___EInt__Group__0");
			builder.put(grammarAccess.get_ELongAccess().getGroup(), "rule___ELong__Group__0");
			builder.put(grammarAccess.get_EDoubleAccess().getGroup(), "rule___EDouble__Group__0");
			builder.put(grammarAccess.get_EFloatAccess().getGroup(), "rule___EFloat__Group__0");
			builder.put(grammarAccess.getAIProjectAccess().getIdAssignment_2(), "rule__AIProject__IdAssignment_2");
			builder.put(grammarAccess.get_DecorationAccess().getNameHintAssignment_2(), "rule___Decoration__NameHintAssignment_2");
			builder.put(grammarAccess.get_DecorationAccess().getLocationShiftAssignment_4(), "rule___Decoration__LocationShiftAssignment_4");
			builder.put(grammarAccess.get_PointAccess().getXAssignment_2(), "rule___Point__XAssignment_2");
			builder.put(grammarAccess.get_PointAccess().getYAssignment_4(), "rule___Point__YAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AIProjectGratextGrammarAccess grammarAccess;

	@Override
	protected InternalAIProjectGratextParser createParser() {
		InternalAIProjectGratextParser result = new InternalAIProjectGratextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE__WS", "RULE__ML_COMMENT", "RULE__SL_COMMENT" };
	}

	public AIProjectGratextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AIProjectGratextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
