/*
 * generated by Xtext 2.14.0
 */
grammar InternalAIProjectGratext;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package info.scce.cinco.product.aiProject.gratext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package info.scce.cinco.product.aiProject.gratext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import info.scce.cinco.product.aiProject.gratext.services.AIProjectGratextGrammarAccess;

}

@parser::members {

 	private AIProjectGratextGrammarAccess grammarAccess;

    public InternalAIProjectGratextParser(TokenStream input, AIProjectGratextGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AIProject";
   	}

   	@Override
   	protected AIProjectGratextGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAIProject
entryRuleAIProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAIProjectRule()); }
	iv_ruleAIProject=ruleAIProject
	{ $current=$iv_ruleAIProject.current; }
	EOF;

// Rule AIProject
ruleAIProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAIProjectAccess().getAIProjectAction_0(),
					$current);
			}
		)
		otherlv_1='AIProject'
		{
			newLeafNode(otherlv_1, grammarAccess.getAIProjectAccess().getAIProjectKeyword_1());
		}
		(
			(
				lv_id_2_0=RULE__ID
				{
					newLeafNode(lv_id_2_0, grammarAccess.getAIProjectAccess().getId_IDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAIProjectRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_2_0,
						"info.scce.cinco.product.aiProject.gratext.AIProjectGratext._ID");
				}
			)
		)?
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getAIProjectAccess().getLeftCurlyBracketKeyword_3_0());
			}
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getAIProjectAccess().getRightCurlyBracketKeyword_3_1());
			}
		)?
	)
;

// Entry rule entryRule_Point
entryRule_Point returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.get_PointRule()); }
	iv_rule_Point=rule_Point
	{ $current=$iv_rule_Point.current; }
	EOF;

// Rule _Point
rule_Point returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.get_PointAccess().get_PointAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.get_PointAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.get_PointAccess().getX_EIntParserRuleCall_2_0());
				}
				lv_x_2_0=rule_EInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.get_PointRule());
					}
					set(
						$current,
						"x",
						lv_x_2_0,
						"info.scce.cinco.product.aiProject.gratext.AIProjectGratext._EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.get_PointAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.get_PointAccess().getY_EIntParserRuleCall_4_0());
				}
				lv_y_4_0=rule_EInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.get_PointRule());
					}
					set(
						$current,
						"y",
						lv_y_4_0,
						"info.scce.cinco.product.aiProject.gratext.AIProjectGratext._EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.get_PointAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRule_EString
entryRule_EString returns [String current=null]:
	{ newCompositeNode(grammarAccess.get_EStringRule()); }
	iv_rule_EString=rule_EString
	{ $current=$iv_rule_EString.current.getText(); }
	EOF;

// Rule _EString
rule_EString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this__STRING_0=RULE__STRING
	{
		$current.merge(this__STRING_0);
	}
	{
		newLeafNode(this__STRING_0, grammarAccess.get_EStringAccess().get_STRINGTerminalRuleCall());
	}
;

// Entry rule entryRule_EInt
entryRule_EInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.get_EIntRule()); }
	iv_rule_EInt=rule_EInt
	{ $current=$iv_rule_EInt.current.getText(); }
	EOF;

// Rule _EInt
rule_EInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this__SIGN_0=RULE__SIGN
			{
				$current.merge(this__SIGN_0);
			}
			{
				newLeafNode(this__SIGN_0, grammarAccess.get_EIntAccess().get_SIGNTerminalRuleCall_0());
			}
		)?
		this__INT_1=RULE__INT
		{
			$current.merge(this__INT_1);
		}
		{
			newLeafNode(this__INT_1, grammarAccess.get_EIntAccess().get_INTTerminalRuleCall_1());
		}
	)
;

RULE__ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE__SIGN : ('+'|'-');

RULE__INT : ('0'..'9')+;

RULE__STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE__ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE__SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE__WS : (' '|'\t'|'\r'|'\n')+;

RULE__ANY_OTHER : .;
