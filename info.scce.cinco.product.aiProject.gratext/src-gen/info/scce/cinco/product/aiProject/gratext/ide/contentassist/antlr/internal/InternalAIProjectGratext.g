/*
 * generated by Xtext 2.14.0
 */
grammar InternalAIProjectGratext;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package info.scce.cinco.product.aiProject.gratext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package info.scce.cinco.product.aiProject.gratext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import info.scce.cinco.product.aiProject.gratext.services.AIProjectGratextGrammarAccess;

}
@parser::members {
	private AIProjectGratextGrammarAccess grammarAccess;

	public void setGrammarAccess(AIProjectGratextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAIProject
entryRuleAIProject
:
{ before(grammarAccess.getAIProjectRule()); }
	 ruleAIProject
{ after(grammarAccess.getAIProjectRule()); } 
	 EOF 
;

// Rule AIProject
ruleAIProject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAIProjectAccess().getGroup()); }
		(rule__AIProject__Group__0)
		{ after(grammarAccess.getAIProjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRule_Point
entryRule_Point
:
{ before(grammarAccess.get_PointRule()); }
	 rule_Point
{ after(grammarAccess.get_PointRule()); } 
	 EOF 
;

// Rule _Point
rule_Point 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.get_PointAccess().getGroup()); }
		(rule___Point__Group__0)
		{ after(grammarAccess.get_PointAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRule_EString
entryRule_EString
:
{ before(grammarAccess.get_EStringRule()); }
	 rule_EString
{ after(grammarAccess.get_EStringRule()); } 
	 EOF 
;

// Rule _EString
rule_EString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.get_EStringAccess().get_STRINGTerminalRuleCall()); }
		RULE__STRING
		{ after(grammarAccess.get_EStringAccess().get_STRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRule_EInt
entryRule_EInt
:
{ before(grammarAccess.get_EIntRule()); }
	 rule_EInt
{ after(grammarAccess.get_EIntRule()); } 
	 EOF 
;

// Rule _EInt
rule_EInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.get_EIntAccess().getGroup()); }
		(rule___EInt__Group__0)
		{ after(grammarAccess.get_EIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AIProject__Group__0__Impl
	rule__AIProject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAIProjectAccess().getAIProjectAction_0()); }
	()
	{ after(grammarAccess.getAIProjectAccess().getAIProjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AIProject__Group__1__Impl
	rule__AIProject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAIProjectAccess().getAIProjectKeyword_1()); }
	'AIProject'
	{ after(grammarAccess.getAIProjectAccess().getAIProjectKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AIProject__Group__2__Impl
	rule__AIProject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAIProjectAccess().getIdAssignment_2()); }
	(rule__AIProject__IdAssignment_2)?
	{ after(grammarAccess.getAIProjectAccess().getIdAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AIProject__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAIProjectAccess().getGroup_3()); }
	(rule__AIProject__Group_3__0)?
	{ after(grammarAccess.getAIProjectAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AIProject__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AIProject__Group_3__0__Impl
	rule__AIProject__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAIProjectAccess().getLeftCurlyBracketKeyword_3_0()); }
	'{'
	{ after(grammarAccess.getAIProjectAccess().getLeftCurlyBracketKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AIProject__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIProject__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAIProjectAccess().getRightCurlyBracketKeyword_3_1()); }
	'}'
	{ after(grammarAccess.getAIProjectAccess().getRightCurlyBracketKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule___Point__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___Point__Group__0__Impl
	rule___Point__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_PointAccess().get_PointAction_0()); }
	()
	{ after(grammarAccess.get_PointAccess().get_PointAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___Point__Group__1__Impl
	rule___Point__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_PointAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.get_PointAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___Point__Group__2__Impl
	rule___Point__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_PointAccess().getXAssignment_2()); }
	(rule___Point__XAssignment_2)
	{ after(grammarAccess.get_PointAccess().getXAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___Point__Group__3__Impl
	rule___Point__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_PointAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.get_PointAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___Point__Group__4__Impl
	rule___Point__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_PointAccess().getYAssignment_4()); }
	(rule___Point__YAssignment_4)
	{ after(grammarAccess.get_PointAccess().getYAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___Point__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_PointAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.get_PointAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule___EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___EInt__Group__0__Impl
	rule___EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule___EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_EIntAccess().get_SIGNTerminalRuleCall_0()); }
	(RULE__SIGN)?
	{ after(grammarAccess.get_EIntAccess().get_SIGNTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule___EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule___EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule___EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.get_EIntAccess().get_INTTerminalRuleCall_1()); }
	RULE__INT
	{ after(grammarAccess.get_EIntAccess().get_INTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AIProject__IdAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAIProjectAccess().getId_IDTerminalRuleCall_2_0()); }
		RULE__ID
		{ after(grammarAccess.getAIProjectAccess().getId_IDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__XAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.get_PointAccess().getX_EIntParserRuleCall_2_0()); }
		rule_EInt
		{ after(grammarAccess.get_PointAccess().getX_EIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule___Point__YAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.get_PointAccess().getY_EIntParserRuleCall_4_0()); }
		rule_EInt
		{ after(grammarAccess.get_PointAccess().getY_EIntParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE__ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE__SIGN : ('+'|'-');

RULE__INT : ('0'..'9')+;

RULE__STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE__ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE__SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE__WS : (' '|'\t'|'\r'|'\n')+;

RULE__ANY_OTHER : .;
